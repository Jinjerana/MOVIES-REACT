{"version":3,"file":"static/js/357.f3904f84.chunk.js","mappings":"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","sources":["components/Reviews.js","hooks/useFetchTrendingMovies.js","hooks/useFetchMovieInfo.js","hooks/useFetchCast.js","hooks/useFetchReview.js","services/API.js"],"sourcesContent":["import { useFetchReviews } from 'hooks';\n\nconst styles = {\n  title: {\n    fontWeight: 700,\n    fontSize: 26,\n    color: '#feb236',\n  },\n  author: {\n    fontWeight: 700,\n    fontSize: 22,\n    color: '#feb236',\n  },\n};\n\nconst Reviews = () => {\n  const { reviews, isLoading, error } = useFetchReviews();\n\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Something went wrong...</p>}\n      <h1 style={styles.title}>Reviews</h1>\n      {reviews.length > 0 ? (\n        reviews.map(({ author, content, id }) => (\n          <div key={id}>\n            <h2 style={styles.author}>{author}</h2>\n            <p>{content}</p>\n          </div>\n        ))\n      ) : (\n        <p>No reviews</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'services/API';\n\nexport const useFetchTrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const data = await getTrendingMovies();\n        setMovies(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return {\n    movies,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/API';\n\nexport const useFetchMovieInfo = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    movie,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/API';\n\nexport const useFetchCast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    cast,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/API';\n\nexport const useFetchReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    reviews,\n    isLoading,\n    error,\n  };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '30f74636e08937577c41f8000490a2f5';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `/trending/movie/day?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try more');\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const {data} = await axios.get(\n      `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n"],"names":["styles","title","fontWeight","fontSize","color","author","useFetchReviews","reviews","isLoading","error","style","length","map","content","id","useFetchTrendingMovies","useState","movies","setMovies","setIsLoading","setError","useEffect","fetchData","getTrendingMovies","data","useFetchMovieInfo","movie","setMovie","movieId","useParams","getMovieDetails","useFetchCast","cast","setCast","getMovieCredits","setReviews","getMovieReviews","axios","API_KEY","results","Error","getSearchMovies","query"],"sourceRoot":""}