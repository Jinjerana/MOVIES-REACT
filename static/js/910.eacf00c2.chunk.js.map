{"version":3,"file":"static/js/910.eacf00c2.chunk.js","mappings":"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","sources":["components/Cast.js","hooks/useFetchTrendingMovies.js","hooks/useFetchMovieInfo.js","hooks/useFetchCast.js","hooks/useFetchReview.js","services/API.js"],"sourcesContent":["import { useFetchCast } from 'hooks';\n\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: 20,\n    listStyleType: 'none',\n    textDecoration: 'none',\n    margin: 20,\n  },\n  title: {\n    fontWeight: 700,\n    fontSize: 26,\n    color: '#feb236',\n  },\n};\n\nconst Cast = () => {\n  const { cast, isLoading, error } = useFetchCast();\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Something went wrong...</p>}\n      <h1 style={styles.title}>Cast</h1>\n      <div style={styles.container}>\n        {cast.map(({ profile_path, name, character, id }) => {\n          return (\n            <div key={id}>\n              <div>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : defaultImg\n                  }\n                  width={200}\n                  alt={name}\n                />\n              </div>\n              <div>\n                <div>{name}</div>\n                <p>{character}</p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Cast;\n","import { useEffect, useState } from 'react';\nimport { getTrendingMovies } from 'services/API';\n\nexport const useFetchTrendingMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const data = await getTrendingMovies();\n        setMovies(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return {\n    movies,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/API';\n\nexport const useFetchMovieInfo = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    movie,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/API';\n\nexport const useFetchCast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    cast,\n    isLoading,\n    error,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/API';\n\nexport const useFetchReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return {\n    reviews,\n    isLoading,\n    error,\n  };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = '30f74636e08937577c41f8000490a2f5';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `/trending/movie/day?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try more');\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getSearchMovies = async query => {\n  try {\n    const {data} = await axios.get(\n      `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data.cast;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data.results;\n  } catch (error) {\n    throw new Error('Oops! Try again');\n  }\n};\n"],"names":["styles","container","display","flexWrap","gap","listStyleType","textDecoration","margin","title","fontWeight","fontSize","color","useFetchCast","cast","isLoading","error","style","map","profile_path","name","character","id","src","width","alt","useFetchTrendingMovies","useState","movies","setMovies","setIsLoading","setError","useEffect","fetchData","getTrendingMovies","data","useFetchMovieInfo","movie","setMovie","movieId","useParams","getMovieDetails","setCast","getMovieCredits","useFetchReviews","reviews","setReviews","getMovieReviews","axios","API_KEY","results","Error","getSearchMovies","query"],"sourceRoot":""}